class Color:
    """ Хранение возможных вариантов цвета узла красно-черного дерева """
    BLACK: int = 0
    RED: int = 1


class Node:
    """ Узел для размещения в красно-черном дереве: имеет цвет (черный или красный),
    может иметь до двух потомков - левого и правого.
        Параметры:
        ----------
        value - значение
        color - цвет -> черный или красный, используется класс Color (по умолчанию -> Color.RED)
        left - левый потомок (по умолчанию -> None)
        right - правый потомок (по умолчанию -> None)
    """

    def __init__(self, value: int, color: int = Color.RED, left=None, right=None) -> None:
        self.value = value
        self.color = color
        self.left = left
        self.right = right

    def __str__(self):
        return f'{self.value=} {self.color=} {self.left=} {self.right=}'


class RedBlackTree:
    """ Красно-черное дерево (далее КЧД) придерживается следующих параметров:
    *   - каждый узел может быть либо черным, либо красным и иметь до двух потомков
    *   - корень всегда черный
    *   - потомки красного узла обязательно черные
    *   - добавляемый узел - красный
    *  Реализованный в данном классе частный случай КЧД - левостороннее красно-черное дерево (далее ЛКЧД):
    *   - красный узел может быть только левым """

    def __init__(self, root: Node = None) -> None:
        """ Корневой элемент - начало дерева """
        self.root = root

    def add_node(self, value: int) -> bool:
        """ Добавление нового узла с передаваемым значением в КЧД.
        Основная задача: проверить наличие корневого узла и вызвать приватный метод добавления.

        :param int value: Передаваемое значение узла.
        :return: Успех добавления.
        """

        # Если корневой узел существует.
        if self.root:
            # Создаем новый узел относительно корня. Вызываем приватный метод.
            result: bool = self.__add_node(self.root, value)
            # Балансируем.
            self.root = self.__rebalance(self.root)
            # Устанавливаем цветовое свойство корня на черный, так как после балансировки
            # на месте корневого узла может оказаться узел красного цвета.
            self.root.color = Color.BLACK
            return result
        else:
            # Если корневого узла не существует - создаем новый черный узел.
            self.root = Node(value, Color.BLACK)
            return True

    def __add_node(self, node: Node, value: int) -> bool:
        """ Приватный метод добавления нового узла в КЧД, на которую ссылается публичный метод add_node.
        Рекурсивно проверяет добавляемый узел на уникальность, возвращает булево значение, указывая удалось ли добавить.

        :param node: Передаваемый узел.
        :param value: Передаваемое значение узла.
        :return: Успех добавления.
        """

        # Если значение узла равно искомому - вернем false.
        if node.value == value:
            return False
        else:
            # Если значение узла больше искомого, тогда обращаемся к левому потомку.
            if node.value > value:
                if node.left:
                    # Если потомок существует, рекурсивно вызываем на нем добавление нового узла и проходим
                    # в глубину с проверкой -> можно ли создать узел там?
                    is_added: bool = self.__add_node(node.left, value)
                    # Скручивая рекурсию, проверим -> нуждается ли наше дерево в балансировке?
                    # Балансируем в случае необходимости.
                    node.left = self.__rebalance(node.left)
                    return is_added
                else:
                    # Если потомок не существует, значит найдено подходящее место для размещения нового узла.
                    # Размещаем новый узел, присваиваем значение. Новые узлы -> красные -> цвет по умолчанию.
                    node.left = Node(value)
                    return True
            else:
                # Если значение меньше искомого, тогда обращаемся к правому потомку.
                if node.right:
                    # Если потомок существует, рекурсивно вызываем на нем добавление нового узла и проходим
                    # в глубину с проверкой -> можно ли создать узел там?
                    is_added: bool = self.__add_node(node.right, value)
                    # Скручивая рекурсию, проверим -> нуждается ли наше дерево в балансировке?
                    # Балансируем в случае необходимости.
                    node.right = self.__rebalance(node.right)
                    return is_added
                else:
                    # Если потомок не существует, значит найдено подходящее место для размещения нового узла.
                    # Размещаем новый узел, присваиваем значение. Новые узлы -> красные -> цвет по умолчанию.
                    node.right = Node(value)
                    return True

    def __rebalance(self, node: Node) -> Node:
        """ Балансировка дерева применяется в случае необходимости замены цвета узлов согласно свойству ЛКЧД.

        :param node: Балансируемый узел.
        :return: Отбалансированный узел.
        """

        result: Node = node
        need_balance: bool = True
        # Исполняется пока есть необходимость в балансировке -> поднятый флаг на дальнейшую балансировку.
        while need_balance:
            # Опускаем флаг перед проверками.
            need_balance = False
            # Если у проверяемого узла имеется правый красный потомок,
            # при этом левый потомок либо не существует, либо он черный.
            if (result.right and result.right.color == Color.RED
                    and (result.left is None or result.left.color == Color.BLACK)):
                # Поднимаем флаг на дальнейшую балансировку.
                need_balance = True
                # Производим малый правый поворот.
                result = self.__right_turn(result)
            # Если у проверяемого узла имеется левый красный потомок, при этом у этого потомка
            # имеется свой красный потомок, иными словами -> два красных узла подряд вниз по иерархии.
            if (result.left and result.left.color == Color.RED
                    and (result.left.left and result.left.left.color == Color.RED)):
                # Поднимаем флаг на дальнейшую балансировку.
                need_balance = True
                # Производим малый левый поворот.
                result = self.__left_turn(result)
            # Если у проверяемого узла имеются два потомка и оба красного цвета.
            if (result.left and result.left.color == Color.RED
                    and (result.right and result.right.color == Color.RED)):
                # Поднимаем флаг на дальнейшую балансировку.
                need_balance = True
                # Выполняем смену цвета потомков проверяемого узла и присвоение черного цвета проверяемому узлу.
                self.__color_exchange(result)
        return result

    @staticmethod
    def __right_turn(node: Node) -> Node:
        """ Малый правый поворот ЛКЧД.

        :param node: Балансируемый узел.
        :return: Отбалансированный узел.
        """

        # Для правостороннего поворота мы берем правого потомка относительно балансируемого узла и
        # выделяем его в отдельную переменную.
        right: Node = node.right
        # Инициализируем переменную промежуточного потомка, это левый потомок правого потомка балансируемого узла,
        # который в итоге окажется посередине, потому, что родители будут меняться местами относительно центра обмена.
        between: Node = right.left
        # По условию малого правостороннего поворота -> правый потомок балансируемого узла - красный.
        # Назначим значение балансируемого узла 'node' левому потомку правого потомка балансируемого узла.
        right.left = node
        # Назначим сохраненное значение левого потомка правого потомка балансируемого узла 'between'
        # правому потомку балансируемого узла, который согласно свойству бинарного дерева, имеет значение между
        # значениями балансируемого узла и правого потомка балансируемого узла.
        node.right = between
        # Оказавшийся наверху правый потомок получает цвет балансируемого узла.
        right.color = node.color
        # А сам балансируемый узел, который опустился ниже, определяем свойством цвета -> красный.
        node.color = Color.RED
        # Вернем, оказавшегося наверху правого потомка.
        return right

    @staticmethod
    def __left_turn(node: Node) -> Node:
        """ Малый левый поворот ЛКЧД.

        :param node: Балансируемый узел.
        :return: Отбалансированный узел.
        """

        # Для левостороннего поворота мы берем левого потомка относительно балансируемого узла и
        # выделяем его в отдельную переменную.
        left: Node = node.left
        # Инициализируем переменную промежуточного потомка, это правый потомок левого потомка балансируемого узла,
        # который в итоге окажется посередине, потому, что родители будут меняться местами относительно центра обмена.
        between: Node = left.right
        # По условию левостороннего поворота -> левый потомок балансируемого узла - красный.
        # Назначим значение балансируемого узла 'node' правому потомку левого потомка балансируемого узла.
        left.right = node
        # Назначим сохраненное значение правого потомка левого потомка балансируемого узла 'between'
        # левому потомку балансируемого узла, который согласно свойству бинарного дерева, имеет значение между
        # значениями балансируемого узла и левого потомка балансируемого узла.
        node.left = between
        # Оказавшийся наверху левый потомок получает цвет балансируемого узла.
        left.color = node.color
        # А сам балансируемый узел, который опустился ниже определяем свойством цвета -> красный.
        node.color = Color.RED
        # Вернем, оказавшегося наверху левого потомка.
        return left

    @staticmethod
    def __color_exchange(node: Node) -> None:
        """ Смена цвета узлов при балансировке.
        В ситуации когда проверяемый узел имеет двух красных потомков. Узел становится красным, потомки - черными.

        :param node: Основной узел на смену цвета.
        :return: None
        """
        node.right.color = Color.BLACK
        node.left.color = Color.BLACK
        node.color = Color.RED

    def print_tree(self) -> None:
        """ Метод печати КЧБ с демонстрацией иерархии узлов.
        Основная задача: Проверка корневого узла и вызов приватного метода печати.

        :return: Печать дерева.
        """
        if self.root:
            self.__print_tree(self.root, 'root', 0)
        else:
            print('Пустое дерево.')

    def __print_tree(self, node: Node, node_type: str, starting_indent: int) -> None:
        """ Приватный метод печати КЧБ.
        Рекурсивно проходит все узлы проверяя наличие потомков и печатает их в терминал.

        :param node: Проверяемый узел.
        :param node_type: Тип передаваемого узла (используется три типа: ('root','left','right'))
        :param starting_indent:
        :return:
        """
        # Определим цвет проверяемого узла
        color: str = '-Black' if node.color == 0 else '-Red'
        # Если входящий тип 'root'.
        if node_type == 'root':
            print(f'root--', end='')
            print(f'{node.value}{color}')
            starting_indent += 3  # Сдвинем каретку на три символа.
        # Для остальных типов напечатаем вертикальные линии для демонстрации соответствия иерархии узлов.
        # Напечатаем столько раз, сколько раз параметр starting_indent увеличивался.
        for i in range(starting_indent // 3 - 1):
            if i == 0:
                print('   ', end='')  # Условие для первого смещения каретки.
            print(f'|  ', end='')  # Печать линий для остальных смещений.
        # Если входящий тип 'left'.
        if node_type == 'left':
            print(f'L--{node.value}{color}')  # Печать узла.
        # Если входящий тип 'right'.
        if node_type == 'right':
            print(f'R--{node.value}{color}')  # Печать узла.
        # Проверка на наличие и тип узлов перед рекурсивным вызовом.
        if node.left or node.right:
            starting_indent += 3
            if node.left:
                self.__print_tree(node.left, 'left', starting_indent)
            if node.right:
                self.__print_tree(node.right, 'right', starting_indent)
        else:
            starting_indent -= 3  # Если потомков нет, вернем каретку влево на три символа.